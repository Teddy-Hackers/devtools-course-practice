#############################################
##### Testing
#############################################

set(prefix "${MODULE}")

add_test(
    NAME ${prefix}_can_Run
    COMMAND ${APPLICATION}
)
set_tests_properties (${prefix}_can_Run PROPERTIES
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Print_Help_Without_Arguments
    COMMAND ${APPLICATION}
)
set_tests_properties (${prefix}_can_Print_Help_Without_Arguments PROPERTIES
    PASS_REGULAR_EXPRESSION "With this application you can perform Batcher merge."
    LABELS "${MODULE}")
    
TEST(OddEvenMergeTest, SortArrayWithOneElement) {
    std::vector<int> arr = {1};
    OddEvenMerge::OddEvenMergeBatcherSort(&arr);
    EXPECT_EQ(arr, std::vector<int>{1});
}

TEST(OddEvenMergeTest, SortArrayOfMultipleElements) {
    std::vector<int> arr = {5, 1, 3, 2, 4};
    OddEvenMerge::OddEvenMergeBatcherSort(&arr);
    EXPECT_EQ(arr, std::vector<int>{1, 2, 3, 4, 5});
}

TEST(OddEvenMergeTest, SortArrayWithNegativeElements) {
    std::vector<int> arr = {5, -1, 3, -2, 4};
    OddEvenMerge::OddEvenMergeBatcherSort(&arr);
    EXPECT_EQ(arr, std::vector<int>{-2, -1, 3, 4, 5});
}

TEST(OddEvenMergeTest, SortArrayWithRepeatedElements) {
    std::vector<int> arr = {5, 1, 3, 1, 4};
    OddEvenMerge::OddEvenMergeBatcherSort(&arr);
    EXPECT_EQ(arr, std::vector<int>{1, 1, 3, 4, 5});
}

TEST(OddEvenMergeTest, SortReverseSortedArray) {
    std::vector<int> arr = {5, 4, 3, 2, 1};
    OddEvenMerge::OddEvenMergeBatcherSort(&arr);
    EXPECT_EQ(arr, std::vector<int>{1, 2, 3, 4, 5});
}